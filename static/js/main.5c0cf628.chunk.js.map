{"version":3,"sources":["webShot.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","CssTextField","withStyles","root","color","borderBottomColor","borderColor","TextField","useStyles","makeStyles","theme","display","flexWrap","margin","spacing","App","state","url","data","handleChangeUrl","e","target","value","setState","handleCapture","a","options","dimension","device","format","cacheLimit","delay","zoom","apiUrl","screenshotmachine","generateScreenshotApiUrl","axios","get","responseType","timeout","saveAs","captureSpecific","captureCurrent","chrome","tabs","query","active","lastFocusedWindow","this","Grid","style","container","item","xs","direction","justify","alignItems","marginTop","src","webShotLogo","alt","width","height","className","noValidate","autoComplete","id","label","variant","size","onChange","htmlFor","IconButton","onClick","marginLeft","Button","border","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uFAAAA,EAAOC,QAAU,IAA0B,qC,0qBCgBrCC,G,OAAeC,YAAW,CAC9BC,KAAM,CACJ,sBAAuB,CACrBC,MAAO,SAET,8BAA+B,CAC7BC,kBAAmB,SAErB,2BAA4B,CAC1B,aAAc,CACZC,YAAa,WAEf,mBAAoB,CAClBA,YAAa,SAEf,yBAA0B,CACxBA,YAAa,YAhBAJ,CAqBlBK,MAEGC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCP,KAAM,CACJQ,QAAS,OACTC,SAAU,QAEZC,OAAQ,CACNA,OAAQH,EAAMI,QAAQ,QAkHXC,E,4MA5GbC,MAAQ,CACNC,IAAK,GACLC,KAAM,S,EAGRC,gBAAkB,SAACC,GACjB,IAAMH,EAAMG,EAAEC,OAAOC,MACrB,EAAKC,SAAS,CAACN,S,EAGjBO,c,uCAAgB,WAAMP,GAAN,qBAAAQ,EAAA,4DACI,SACC,GACfC,EAAU,CAEVT,IAAMA,EAENU,UAAY,YACZC,OAAS,UACTC,OAAQ,MACRC,WAAY,IACZC,MAAO,MACPC,KAAM,OAGNC,EAASC,IAAkBC,yBAdb,SACC,GAagET,GAfrE,SAiBOU,IAAMC,IAAIJ,EAAQ,CACrCK,aAAc,OACdC,QAAS,MAnBG,uBAiBPrB,EAjBO,EAiBPA,KAjBO,UAqBRsB,iBAAOtB,EAAM,eArBL,QAsBd,EAAKK,SAAS,CAACL,SAtBD,4C,wDAyBhBuB,gB,sBAAkB,8BAAAhB,EAAA,6DACVP,GAAO,EAAKF,MAAME,MAAe,GACvC,EAAKK,SAAS,CAACL,SAETD,EAAM,EAAKD,MAAMC,IAJP,SAKV,EAAKO,cAAcP,GALT,2C,EAQlByB,e,sBAAiB,4BAAAjB,EAAA,sDACTP,GAAO,EAAKF,MAAME,MAAe,GACvC,EAAKK,SAAS,CAACL,SAEfyB,OAAOC,KAAKC,MAAM,CAACC,QAAQ,EAAMC,mBAAmB,GAApD,uCAA2D,WAAMH,GAAN,eAAAnB,EAAA,6DACnDR,EAAM2B,EAAK,GAAG3B,IADqC,SAEnD,EAAKO,cAAcP,GAFgC,2CAA3D,uDAJe,2C,uDAUR,IAAD,EACc+B,KAAKhC,MAAlBC,EADD,EACCA,IAAKC,EADN,EACMA,KAEZ,OACE,6BACE,kBAAC+B,EAAA,EAAD,CAAMC,MAAO,CAAC9C,MAAO,WAAY+C,WAAS,EAACC,MAAI,EAACC,GAAM,GAAIC,UAAU,SAASC,QAAQ,SAASC,WAAW,UACrG,kBAACP,EAAA,EAAD,CAAMC,MAAO,CAACO,UAAW,IAAKL,MAAI,EAACC,GAAM,GAAIF,WAAS,EAACG,UAAU,MAAMC,QAAQ,SAASC,WAAW,UACjG,yBAAKE,IAAKC,IAAaC,IAAI,UAAUC,MAAM,QAAQC,OAAO,WAE5D,kBAACb,EAAA,EAAD,CAAOG,MAAI,EAACC,GAAM,GAAIF,WAAS,EAACG,UAAU,MAAMC,QAAQ,SAASC,WAAW,UAC1E,0EAEF,kBAACP,EAAA,EAAD,CAAME,WAAS,EAACC,MAAI,EAACC,GAAM,GAAIC,UAAU,MAAMC,QAAQ,SAASC,WAAW,UACvE,0BAAMO,UAAWvD,EAAUL,KAAM6D,YAAU,EAACC,aAAa,OACvD,kBAAChE,EAAD,CACE8D,UAAWvD,EAAUK,OACrBqD,GAAG,4BACHC,MAAM,MACNC,QAAQ,WACRC,KAAK,QACL/C,MAAOL,EACPqD,SAAUtB,KAAK7B,mBAKnB,2BAAOoD,QAAQ,oBACb,kBAACC,EAAA,EAAD,CAAYC,QAASzB,KAAKP,gBAAiBS,MAAO,CAAC9C,MAAO,UAAWsE,WAAY,KAC/E,kBAAC,IAAD,SAKR,kBAACzB,EAAA,EAAD,CAAME,WAAS,EAACC,MAAI,EAACC,GAAM,GAAIC,UAAU,MAAMC,QAAQ,SAASC,WAAW,UACzE,oDAEF,kBAACP,EAAA,EAAD,CAAME,WAAS,EAACC,MAAI,EAACC,GAAM,GAAIC,UAAU,MAAMC,QAAQ,SAASC,WAAW,UACvE,2BAAOe,QAAQ,oBACb,kBAACI,EAAA,EAAD,CAAQP,QAAQ,WAAWK,QAASzB,KAAKN,eAAgBQ,MAAO,CAAC9C,MAAO,UAAWsE,WAAY,GAAIE,OAAQ,sBACzG,kBAAC,IAAD,UAMF,GAAR1D,GAAyB,IAARA,EACf,kBAAC+B,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAM,GAAIF,WAAS,EAACG,UAAU,MAAMC,QAAQ,SAASC,WAAW,UACzE,oDACQ,U,GAvGJqB,aCrCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5c0cf628.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/webShot.3981ffe7.png\";","/*global chrome*/\n\nimport React, {Component} from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport screenshotmachine from 'screenshotmachine';\nimport { saveAs } from 'file-saver'\nimport axios from \"axios\";\nimport webShotLogo from \"./webShot.png\"\n\nimport './App.css';\n\nconst CssTextField = withStyles({\n  root: {\n    '& label.Mui-focused': {\n      color: 'green',\n    },\n    '& .MuiInput-underline:after': {\n      borderBottomColor: 'green',\n    },\n    '& .MuiOutlinedInput-root': {\n      '& fieldset': {\n        borderColor: '#2ccec3',\n      },\n      '&:hover fieldset': {\n        borderColor: 'white',\n      },\n      '&.Mui-focused fieldset': {\n        borderColor: 'green',\n      },\n    },\n    \n  },\n})(TextField);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\nclass App extends Component{\n\n  state = {\n    url: \"\",\n    data: \"start\"\n  }\n\n  handleChangeUrl = (e) => {\n    const url = e.target.value;\n    this.setState({url});\n  }\n\n  handleCapture = async(url) => {\n    var customerKey = '8f8654';\n    let secretPhrase = ''; //leave secret phrase empty, if not needed\n    let options = {\n        //mandatory parameter\n        url : url,\n        // all next parameters are optional, see our website screenshot API guide for more details\n        dimension : '1366xfull', // or \"1366xfull\" for full length screenshot\n        device : 'desktop',\n        format: 'png',\n        cacheLimit: '0',\n        delay: '200',\n        zoom: '100'\n    }\n\n    var apiUrl = screenshotmachine.generateScreenshotApiUrl(customerKey, secretPhrase, options);\n    \n    const {data} = await axios.get(apiUrl, {\n      responseType: 'blob',\n      timeout: 30000,\n    })\n    await saveAs(data, 'capture.png');\n    this.setState({data})\n  }\n\n  captureSpecific = async() => {\n    const data = this.state.data ? false : \"\";\n    this.setState({data})\n\n    const url = this.state.url;\n    await this.handleCapture(url);\n  }\n\n  captureCurrent = async() => {\n    const data = this.state.data ? false : \"\";\n    this.setState({data})\n\n    chrome.tabs.query({active: true, lastFocusedWindow: true}, async(tabs) => {\n      const url = tabs[0].url;\n      await this.handleCapture(url);\n    });\n  }\n\n  render(){\n    const {url, data} = this.state;\n\n    return(\n      <div>\n        <Grid style={{color: \"#202d42\"}} container item xs = {12} direction=\"column\" justify=\"center\" alignItems=\"center\" >\n            <Grid style={{marginTop: 10}} item xs = {12} container direction=\"row\" justify=\"center\" alignItems=\"center\" >\n              <img src={webShotLogo} alt=\"WebShot\" width=\"330px\" height=\"100px\" />\n            </Grid>\n            <Grid  item xs = {12} container direction=\"row\" justify=\"center\" alignItems=\"center\" >\n              <p>Enter URL to take Full page screen capture</p>\n            </Grid>\n            <Grid container item xs = {12} direction=\"row\" justify=\"center\" alignItems=\"center\" >\n                <form className={useStyles.root} noValidate autoComplete=\"off\">\n                  <CssTextField \n                    className={useStyles.margin}\n                    id=\"custom-css-outlined-input\" \n                    label=\"url\" \n                    variant=\"outlined\" \n                    size=\"small\" \n                    value={url}\n                    onChange={this.handleChangeUrl}\n                    \n                  />\n                </form>\n\n                <label htmlFor=\"icon-button-file\">\n                  <IconButton onClick={this.captureSpecific} style={{color: \"#2ccec3\", marginLeft: 10}} >\n                    <PhotoCamera />\n                  </IconButton>\n                </label>\n            </Grid>\n\n            <Grid container item xs = {12} direction=\"row\" justify=\"center\" alignItems=\"center\" >\n              <p>Capture Current page</p>\n            </Grid>\n            <Grid container item xs = {12} direction=\"row\" justify=\"center\" alignItems=\"center\" >\n                <label htmlFor=\"icon-button-file\">\n                  <Button variant=\"outlined\" onClick={this.captureCurrent} style={{color: \"#2ccec3\", marginLeft: 10, border: \"1px solid #2ccec3\"}} >\n                    <PhotoCamera />\n                  </Button>\n                </label>\n            </Grid>\n        </Grid>\n        {\n          data == false || data == \"\" ?\n            <Grid item xs = {12} container direction=\"row\" justify=\"center\" alignItems=\"center\" >\n              <p>Taking Screenshot...</p>\n            </Grid> : null\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}